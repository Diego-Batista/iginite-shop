import Head from 'next/head'
import Image from 'next/legacy/image'
import useEmblaCarousel from 'embla-carousel-react'
import { HomeConatiner, Product, SliderContainer } from '../styles/pages/home'

import { stripe } from '../lib/stripe'
import { GetStaticProps } from 'next'
import Stripe from 'stripe'
import { CartButton } from '../components/CartButton'
import { useCart } from '../../hooks/useCart'
import { IProduct } from '../../contexts/CartContext'
import { MouseEvent, useEffect, useState } from 'react'
import { ProductSkeleton } from '../components/ProductSkeleton'

interface HomeProps {
  products: IProduct[]
}

export default function Home({ products }: HomeProps) {
  const [isLoading, setIsLoading] = useState(true)
  const [emblaRef] = useEmblaCarousel({
    align: 'start',
    skipSnaps: false,
    dragFree: true
  })

  useEffect(() => {
    const timeOut = setTimeout(() => setIsLoading(false), 2000)

    return () => clearTimeout(timeOut)
  }, [])

  const { addToCart, checkItemAlreadyExists } = useCart()

  function handleAddToCart(e: MouseEvent<HTMLButtonElement>, product: IProduct) {
    e.preventDefault()
    addToCart(product)
  }

  return (
    <>
      <Head>
        <title>Ignite-Shop | Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div style={{ overflow: "hidden", width: "100%"}}>
        <HomeConatiner>
          <div ref={emblaRef} className="embla">
            <SliderContainer className="embla__container container">
              {isLoading ? (  
                <>
                  <ProductSkeleton className="embla__slide"/>
                  <ProductSkeleton className="embla__slide"/>
                  <ProductSkeleton className="embla__slide"/>
                </>
              ) : (
                <>
                  {products.map(product => (
                    <Product href={`/product/${product.id}`} key={product.id} className="embla__slide"  prefetch={false}>
                        <Image
                          src={product.imageUrl}
                          width={520}
                          height={480}
                        />

                        <footer>
                          <div>
                            <strong>{product.name}</strong>
                            <span>{product.price}</span>
                          </div>
                          <CartButton 
                            color="green" 
                            size="large" 
                            onClick={(e) => handleAddToCart(e, product)}
                            disabled={checkItemAlreadyExists(product.id)}
                          />
                        </footer>
                    </Product> 
                  ))} 
                </>
              )}
            </SliderContainer>
          </div>
        </HomeConatiner>
      </div>

    </>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const response = await stripe.products.list({
    expand: ['data.default_price']
  })


  const products = response.data.map(product => {
    const price = product.default_price as Stripe.Price

    return {
      id: product.id,
      name: product.name,
      imageUrl: product.images[0],
      price: new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL',
      }).format(price.unit_amount / 100),
      numberPrice: price.unit_amount / 100,
      defaultPriceId: price.id
    }
  })
  return {
    props: {
      products
    },
    revalidate: 60 * 60 * 2, // 2 horas
  }
}
